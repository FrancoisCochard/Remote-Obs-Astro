# Main stuff
import collections
import json
import logging.config
import os
import sys
import threading

# QT stuff
from PyQt5.QtWidgets import QApplication
from PyQt5.QtGui import QVector3D
from PyQt5.Qt3DExtras import Qt3DWindow, QOrbitCameraController

#Astropy stuff
from astropy import units as u
from astropy.coordinates import SkyCoord

# Local stuff
sys.path.append('.')

sys.path.append('ScopeSimulator')
from ScopeSimulator import View3D

# Local stuff : IndiClient
from helper.Indi3DSimulatorClient import Indi3DSimulatorClient

# Local stuff : Mount
from Mount.IndiMount import IndiMount

# Local stuff : Observatory
from Observatory.ShedObservatory import ShedObservatory


"""
class SimulationFrameWidget(QtWidgets.QWidget):
    """ """
        This class intends to show some read-only values that comes from
        the backend
    """ """
    def __init__(self, model3D):
        QtWidgets.QWidget.__init__(self)
        self.model3D = model3D
        self.setMinimumSize(712,400)
        self.qw = QuarterWidget(self)
        self.qw.setMinimumSize(712, 400)
        self.qw.setSceneGraph(self.model3D.scene)


def gui_loop(model3D):
        
    simapp = QtWidgets.QApplication(sys.argv)
    simappwindow = QtWidgets.QMainWindow()
    simappwindow.setWindowTitle("EQ Simulator")


    # Build the info widget
    valueinfowidget = ValueInfoDockWidget()

    # Build the simulated system frame, that is generated by the backend,
    # through freecad
    widget3D = SimulationFrameWidget(model3D)

    # Add all widgets to main application window
    simappwindow.addDockWidget(QtCore.Qt.LeftDockWidgetArea,
                               valueinfowidget)
    simappwindow.setCentralWidget(widget3D)

    # Now show everything
    simappwindow.show()
    simapp.exec_() 
"""

if __name__ == "__main__":

    # load the logging configuration
    logging.config.fileConfig('logging.ini')

    # build+connect indi client
    indiCli = Indi3DSimulatorClient(None)
    indiCli.connect()

    # Build the observatory
    obs = ShedObservatory()

    # Build the Mount
    mount = IndiMount(indiClient=indiCli,
                      configFileName=None, connectOnCreate=True)
    gps_coord = obs.getGpsCoordinates()
    # Update model3D mount with latitude
    #app = QApplication([])
    #view = View3D.View3D()
    #view.set_coord(gps_coord)

    # First register callbacks
    def update_coord(coord):
        #view.model.setRA(coord['RA'])
        #view.model.setDEC(coord['DEC'])
        pass

    indiCli.register_number_callback(
        device_name=mount.deviceName,
        vec_name='EQUATORIAL_EOD_COORD',
        callback=update_coord)

    # Initializee gui
    #view.initialiseCamera()
    #view.window.show()

    def gui_loop():
        app = QApplication([])
        view = View3D.View3D()
        view.set_coord(gps_coord)
        view.initialiseCamera()
        view.window.show()
        ret = app.exec_()
        sys.exit(ret)
    thread = threading.Thread(target=gui_loop, args=())
    thread.start()
    
    # Now start to do stuff
    mount.set_slew_rate('SLEW_FIND')

    # Unpark if you want something useful to actually happen
    mount.unPark()

    # Do a slew and track
    c = SkyCoord(ra=11.5*u.hour, dec=78.9*u.degree, frame='icrs')
    mount.slew_to_coord_and_track(c)

    # Sync
    c = SkyCoord(ra=11.53*u.hour, dec=79*u.degree, frame='icrs')
    mount.sync_to_coord(c)

    #Do a slew and stop
    c = SkyCoord(ra=10*u.hour, dec=60*u.degree, frame='icrs')
    mount.slew_to_coord_and_stop(c)

    # Park before standby
    mount.park()

    # Everything ends when program is over
    thread.join()
