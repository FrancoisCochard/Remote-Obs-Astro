# Main stuff
import os
import sys
import collections
import json

# QT stuff
from PySide2 import QtCore, QtGui, QtNetwork, QtWidgets

# Pivy stuff, conda config --add channels conda-forge + conda install pyside2
from pivy.coin import SoInput, SoDB
from pivy.quarter import QuarterWidget

import os, sys
sys.path.append(os.path.join(os.environ["CONDA_PREFIX"], "lib"))

# Local stuff
sys.path.append('.')
sys.path.append('ScopeSimulator')
from ScopeSimulator import Simulator


# The important Backend object
#self.simulator = simulator
#self.latitudeSPV.valueChanged.connect(self.simulator.setLatitude)
#self.raangleSPV.valueChanged.connect(self.simulator.setRAangle)
#self.qgridlayout.addWidget(self.raangleSPV, 0, 1)
#self.deangleSPV.valueChanged.connect(self.simulator.setDEangle)
#self.focuserpositionSPV.valueChanged.connect(
#self.focuserangleSPV.valueChanged.connect(
#    self.simulator.setFocuserangle)

class LcdArray(QtWidgets.QScrollArea):
    """
        This class is only used to define a small lcd screen that allows to
        show backend informations to the user
    """
    def __init__(self, valuelist):
        QtWidgets.QScrollArea.__init__(self)
        self.setStyleSheet("QFrame  {font-size: 8pt;}\n")
        self.qgridlayout = QtWidgets.QGridLayout( self)
        self.dictionnary = dict()
        lcdrecord = collections.namedtuple('LcdRecord',
                                           ['name', 'qlabel', 'qlcd'])
        # For each backend value, define a lcd
        for  index, (name, label, digits, mode) in enumerate(valuelist):
            qlabel = QtWidgets.QLabel(label, self)
            qlcd = QtWidgets.QLCDNumber(digits)
            qlcd.setFixedHeight(16)
            lcdmode = QtWidgets.QLCDNumber.Dec
            if (mode=='H'):
                lcdmode = QtWidgets.QLCDNumber.Hex 
            elif (mode=='B'):
                lcdmode=QtWidgets.QLCDNumber.Bin
            qlcd.setMode(lcdmode)
            qlcd.setStyleSheet("QFrame {background-color: black; color: red; }")
            r = lcdrecord(name, qlabel, qlcd)
            self.dictionnary[name] = r
            # Add the label and the actual lcd to the qgrid
            self.qgridlayout.addWidget(r.qlabel, index, 0)
            self.qgridlayout.addWidget(r.qlcd, index, 1)
        self.show()

    def setValue(self, name, value):
        self.dictionnary[name].qlcd.display(value)

class ValueInfoDockWidget(QtWidgets.QDockWidget):
    """
        This class intends to show some read-only values that comes from
        the backend
    """
    def __init__(self):
        QtWidgets.QDockWidget.__init__(self,
            QtCore.QCoreApplication.translate("ValueInfoDockWidget", 
            "BackendInfos"))
        self.setStyleSheet(
            "QFrame, QLineEdit, QPushButton, QCheckBox {font-size: 8pt;}\n")

        # Stick it somewhere
        self.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea |
                             QtCore.Qt.RightDockWidgetArea)
        self.tabwidget = QtWidgets.QTabWidget(self)

        self.ralcd=LcdArray([('RA_STEPS_360','Tot. steps', 8, 'H'),
            ('ra_position', 'Cur. step', 8, 'H')])
        self.delcd=LcdArray([('DE_STEPS_360', 'Tot. steps', 8, 'H'),
            ('de_position','Cur. step', 8, 'H')])
        self.tabwidget.addTab(self.ralcd, "RA Stepper")
        self.tabwidget.addTab(self.delcd, "DE Stepper")

        # Show everything
        self.tabwidget.show()

class SimulationFrameWidget(QtWidgets.QWidget):
    """
        This class intends to show some read-only values that comes from
        the backend
    """
    def __init__(self, simulator):
        QtWidgets.QWidget.__init__(self)
        self.simulator = simulator
        self.setMinimumSize(712,400)
        self.qw = QuarterWidget(self)
        self.qw.setMinimumSize(712, 400)
        self.qw.setSceneGraph(self.simulator.scene)

def main():
    try:
        import FreeCAD
    except ValueError:
        raise RuntimeError('FreeCAD library not found. Please check that the '
                           'FREECADPATH variable in this script is correct')
        
    simapp = QtWidgets.QApplication(sys.argv)
    simappwindow = QtWidgets.QMainWindow()
    simappwindow.setWindowTitle("EQ Simulator")

    # Build the backend
    s = Simulator.Simulator()
    s.Build()

    # Build the info widget
    valueinfowidget = ValueInfoDockWidget()

    # Build the simulated system frame, that is generated by the backend,
    # through freecad
    widget3D = SimulationFrameWidget(s)

    # Add all widgets to main application window
    simappwindow.addDockWidget(QtCore.Qt.LeftDockWidgetArea,
                               valueinfowidget)
    simappwindow.setCentralWidget(widget3D)


    # Now show everything
    simappwindow.show()
    simapp.exec_() 

if __name__ == "__main__":
    main()
